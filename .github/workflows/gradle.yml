# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

env:
  AWS_REGION: ap-northeast-2
  BUCKET_ZIP_NAME: healthit
  S3_BUCKET_NAME: healthit-server-bucket
  CODE_DEPLOY_APPLICATION_NAME: healthit-server
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: healthit-server-codeDeploy-group

jobs:
  build:
    name: Deploy
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'zulu'

    - name: Create application-secret.yml
      run: |
        touch ./src/main/resources/application-secret.yml
        echo "${{ secrets.DI_FROM_SECRET }}" > ./src/main/resources/application-secret.yml
      shell: bash

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      shell: bash

    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: build

    - name: Make Directory
      run: mkdir -p deploy

    - name: Copy secret.yml
      run: cp ./src/main/resources/application-secret.yml ./deploy

    - name: Copy Jar
      run: cp ./build/libs/*.jar ./deploy

    - name: Copy appspec.yml
      run: cp appspec.yml ./deploy

    - name: Copy script
      run: cp ./scripts/*.sh ./deploy

    - name: Make zip file
      run: zip -r ./${{ env.BUCKET_ZIP_NAME }}.zip ./deploy
      shell: bash

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Upload to S3
      run: aws s3 cp --region ${{ env.AWS_REGION }} ./${{ env.BUCKET_ZIP_NAME }}.zip s3://$S3_BUCKET_NAME/

    - name: Deploy
      run: aws deploy create-deployment --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} --file-exists-behavior OVERWRITE --s3-location bucket=${{ env.S3_BUCKET_NAME }},bundleType=zip,key=${{ env.BUCKET_ZIP_NAME }}.zip --region ${{ env.AWS_REGION }}